#!/usr/bin/env python3

import sys
import shutil
import secrets
import ctfcred
import argparse

from pathlib import Path
from argparse import RawDescriptionHelpFormatter


width = min(130, shutil.get_terminal_size().columns - 2)
formatter_class = lambda prog: argparse.RawDescriptionHelpFormatter(prog, max_help_position=width)
fr = argparse.FileType('r')

parser = argparse.ArgumentParser(description='ctfcred v1.0.0 - Simple credential manager for CTFs. Credentials are stored as' +
'plain text within the file system. This credential manager should not be used for' +
'real sensitive data. Do not use it as your password manager.\n\n' +
ctfcred.Config.key_bindings(32), formatter_class=formatter_class)

credential_props = parser.add_argument_group('credential properties')
credential_props.add_argument('--alias', help='alias for displaying username')
credential_props.add_argument('--domain', help='user domain')
credential_props.add_argument('--otp', help='otp base32 secret')
credential_props.add_argument('--url', help='related URL')

export_options = parser.add_argument_group('export')
export_options.add_argument('--basic', action='store_true', help='export credentials in basic auth format')
export_options.add_argument('--domains', dest='e_domain', action='store_true', help='export stored domain names')
export_options.add_argument('--mix', action='store_true', help='mix user-pass combinations during export')
export_options.add_argument('--passwords', dest='e_pass', action='store_true', help='export stored passwords')
export_options.add_argument('--sep', default=':', help="separator for user-pass exports (default: ':')")
export_options.add_argument('--users', dest='e_user', action='store_true', help='export stored usernames')
export_options.add_argument('--users-domain', dest='e_udomain', action='store_true', help='export usernames with domain prefix')
export_options.add_argument('--users-pass', dest='e_upass', action='store_true', help='export usernames with passwords')
export_options.add_argument('--users-pass-domain', dest='e_upassd', action='store_true', help='export usernames with passwords & domain')
export_options.add_argument('--urls', dest='e_url', action='store_true', help='export stored urls')

import_options = parser.add_argument_group('import')
import_options.add_argument('--import-pass', dest='i_pass', metavar='file', type=fr, help='import passwords from file')
import_options.add_argument('--import-user', dest='i_user', metavar='file', type=fr, help='import usernames from file')
import_options.add_argument('--import-user-domain', dest='i_udomain', metavar='file', type=fr, help='import usernames with domain from file')
import_options.add_argument('--import-user-pass', dest='i_upass', type=fr, metavar='file', help='import usernames with passwords from file')
import_options.add_argument('--import-user-pass-domain', dest='i_upassd', metavar='file', type=fr, help='import usernames with passwords & domain')
import_options.add_argument('--remove-imports', dest='ri', action='store_true', help='remove all imported credentials')

parser.add_argument('--clean', action='store_true', help='clear the credentials file')
parser.add_argument('--clone', action='store_true', help='clone the selected credential')
parser.add_argument('--debug', action='store_true', help='disable exception handling')
parser.add_argument('--default-domain', dest='default_domain', metavar='domain', help='set the default domain to use')
parser.add_argument('--default-url', dest='default_url', metavar='url', help='set the default url to use')
parser.add_argument('--gen', action='store_const', const=secrets.token_urlsafe(12), help='automatically generae a password')
parser.add_argument('--no-check', dest='no_check', action='store_true', help='skip dependency check')
parser.add_argument('--update', action='store_true', help='update a user instead of creating one')

parser.add_argument('username', nargs='?', help='username to store')
parser.add_argument('password', nargs='?', help='password to store')
parser.add_argument('note', nargs='?', help='note on the credential')


def set_defaults(args):
    '''
    Checks whether --default-url or --default-domain was specified
    and sets the corresponding configuration options.

    Parameters:
        args        Arguments parsed by argparse

    Returns:
        None
    '''
    if args.default_url:
        ctfcred.Config.default_url = args.default_url

    if args.default_domain:
        ctfcred.Config.default_domain = args.default_domain

    credentials = ctfcred.Credential.from_file()
    credentials = ctfcred.Credential.to_file(credentials)


def handle_export(args):
    '''
    Checks which kind of export was requested and exports the corresponding
    information.

    Parameters:
        args        Arguments parsed by argparse

    Returns:
        None
    '''
    credentials = ctfcred.Credential.from_file()

    if args.e_user:
        ctfcred.Credential.export_usernames(credentials)

    elif args.e_pass:
        ctfcred.Credential.export_passwords(credentials)

    elif args.e_domain:
        ctfcred.Credential.export_domains(credentials)

    elif args.e_udomain:
        ctfcred.Credential.export_user_domain(credentials)

    elif args.e_url:
        ctfcred.Credential.export_urls(credentials)

    elif args.e_upass:
        ctfcred.Credential.export_user_pass(credentials, args.sep, args.mix, False, args.basic)

    elif args.e_upassd:
        ctfcred.Credential.export_user_pass(credentials, args.sep, args.mix, True, args.basic)


def handle_import(args):
    '''
    Checks which kind of import was requested and imports the corresponding
    information.

    Parameters:
        args        Arguments parsed by argparse

    Returns:
        None
    '''
    import_cred = set()
    credentials = ctfcred.Credential.from_file()

    if args.i_user:
        args.i_user.close()
        import_cred = ctfcred.Credential.import_usernames(Path(args.i_user.name), False)

    elif args.i_udomain:
        args.i_udomain.close()
        import_cred = ctfcred.Credential.import_usernames(Path(args.i_pass.name), True)

    elif args.i_pass:
        args.i_pass.close()
        import_cred = ctfcred.Credential.import_passwords(Path(args.i_pass.name))

    elif args.i_upass:
        args.i_upass.close()
        import_cred = ctfcred.Credential.import_userpass(Path(args.i_upass.name), args.sep, False)

    elif args.i_upassd:
        args.i_upassd.close()
        import_cred = ctfcred.Credential.import_userpass(Path(args.i_upassd.name), args.sep, True)

    credentials = credentials.union(import_cred)
    ctfcred.Credential.to_file(credentials)


def main():
    '''
    Parses the supplied command line arguments and invokes the corresponding actions.

    Parameters:
        None

    Returns:
        None
    '''
    args = parser.parse_args()

    try:
        if not args.no_check:
            ctfcred.Config.check_external_dependencies()

        if args.default_url or args.default_domain:
            set_defaults(args)
            sys.exit(0)

        if args.clean:
            ctfcred.Config.write_cred_file({})
            sys.exit(0)

        if args.e_user or args.e_pass or args.e_domain or args.e_url or args.e_udomain or args.e_upass or args.e_upassd:
            handle_export(args)
            sys.exit(0)

        if args.ri:
            credentials = ctfcred.Credential.filter_imports()
            ctfcred.Credential.to_file(credentials)
            sys.exit(0)

        if args.i_user or args.i_pass or args.i_udomain or args.i_upass or args.i_upassd:
            handle_import(args)
            sys.exit(0)

        credentials = ctfcred.Credential.from_file()

        if args.update:

            code, selected = ctfcred.Launcher.start_rofi(credentials, 'Update Credential')

            password = args.gen or args.password
            selected.update(args.username, password, args.note, args.url, args.otp, args.domain, args.alias)
            ctfcred.Credential.to_file(credentials)

        elif args.clone:

            code, selected = ctfcred.Launcher.start_rofi(credentials, 'Clone Credential')

            password = args.gen or args.password
            cloned = selected.clone(args.username, password, args.note, args.url, args.otp, args.domain, args.alias)
            credentials.add(cloned)

            ctfcred.Credential.to_file(credentials)

        elif args.username is not None:

            password = args.gen or args.password
            cred = ctfcred.Credential(args.username, password, args.note, args.url, args.otp, args.domain, 0, alias=args.alias)
            credentials.add(cred)
            ctfcred.Credential.to_file(credentials)
            sys.exit(0)

        credentials = ctfcred.Credential.from_file()
        code, selected = ctfcred.Launcher.start_rofi(credentials)
        ctfcred.Launcher.handle_exit(code, selected, credentials)
        sys.exit(0)

    except ctfcred.credential.MissingCredentialAttribute as e:
        print('[-] Error: Malformed credential file.')
        print(f'[-]\t The {e} attribute is missing on one credential.')

    except ctfcred.config.DependencyException as e:
        print('[-] Error: Missing dependency.')
        print(f'[-]\t {e}')

    except Exception as e:

        if args.debug:
            raise e

        else:
            print('[-] Exception was thrown: ' + str(e))
            sys.exit(1)


main()
